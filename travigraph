#!/bin/bash

usage() {
    echo "<program> -r username/repo -s <start_build> -e <end_build> -o <output_file.png> [-t <tmpdir>] [-cached] [-version]"
    exit 1;
}
version="1.0";

while getopts ":c:r:s:e:o:v:t:" opt; do
  case ${opt} in
    c)
      cached="true"
      ;;
    r)
      repo=${OPTARG}
      ;;
    s)
      sbuild=${OPTARG}
      ;;
    e)
      ebuild=${OPTARG}
      ;;
    o)
      outfile=${OPTARG}
      ;;
    t)
      tmpdir=${OPTARG}/
      ;;
    v)
      echo Version $version
      exit 1
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2 
      exit 1
      ;;
  esac
done

if [ -z "${sbuild}" ] || [ -z "${ebuild}" ] || [ -z "${outfile}" ]  || [ -z "${repo}" ]; then
    usage
    exit 1
fi

mkdir -p ${tmpdir}
for i in `seq $sbuild 25 $ebuild`; do
    echo Processing build $i;
    if [[ ! -f ${tmpdir}$i.parsed.json || $cached -ne "true" ]]; then
        travis raw --json /repos/${repo}/builds?after_number=$i | Rscript regularize_json.R > ${tmpdir}$i.parsed.json;
    fi
done;

Rscript merge_json.R ${tmpdir}*parsed.json > ${tmpdir}out.json;
Rscript process.R ${tmpdir}out.json ${tmpdir}output.csv
Rscript plot.R ${tmpdir}output.csv $outfile
echo "Done"
